package com.facetec23;

import android.app.Activity;
import android.util.Log;
import android.view.View;

import androidx.annotation.NonNull;

import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.Arguments;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableMapKeySetIterator;
import com.facebook.react.bridge.ReadableType;
import com.facetec.sdk.FaceTecSDK;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

import Processors.Config;
import Processors.EnrollmentProcessor;
import Processors.LivenessCheckProcessor;
import Processors.NetworkingHelpers;
import Processors.AuthenticateProcessor;

import Processors.Processor;
import okhttp3.Call;

public class FacetacModule extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    public Processor latestProcessor;
    String sessionToken;
    public SampleAppUtilities utils = new SampleAppUtilities();
    private boolean isSessionPreparingToLaunch = false;
    Callback onSuccess;
    Callback onFail;
    public String user_token = "UserEnrollid777";

    public FacetacModule(ReactApplicationContext reactContext) {
        super(reactContext);
        this.reactContext = reactContext;
    }

    @NonNull
    @Override
    public String getName() {
        return "VlinderFaceTech";
    }

    @ReactMethod
    public void Init(Callback onSuccess, Callback onFail) {
        this.onSuccess = onSuccess;
        this.onFail = onFail;
        WritableMap params = Arguments.createMap();
        final Activity activity = getCurrentActivity();
        params.putBoolean("successful", true);
        Log.i("FaceTecSDKSampleApp", "working"+ params);
        // onFail.invoke(params);
        Config.initializeFaceTecSDKFromAutogeneratedConfig(activity, new FaceTecSDK.InitializeCallback() {
            @Override
            public void onCompletion(final boolean successful) {
                if(successful) {
                    Log.d("FaceTecSDKSampleApp", "Initialization Successful###");
                }
             //    onLivenessCheckPressed();
            }
        });
        getSessionToken(new SessionTokenCallback() {
            @Override
            public void onSessionTokenReceived(String sessionTokenTemp) {
                 Log.d("FaceTecSDKSampleApp", "Initialization Successfu#&&" + sessionToken);
                 sessionToken = sessionTokenTemp;
            }
        });
    }

    @ReactMethod
    public void LivenessCheck(Callback onSuccess, Callback onFail) {
        this.onSuccess = onSuccess;
        this.onFail = onFail;
        WritableMap params = Arguments.createMap();
        params.putBoolean("successful", true);
        Log.i("FaceTecSDKSampleApp", "Running"+ params);
                 Log.d("FaceTecSDKSampleApp", "Initialization Successfu#&&" + sessionToken);
                 latestProcessor = new LivenessCheckProcessor(sessionToken,getCurrentActivity(),sessionTokenErrorCallback,sessionTokenSuccessCallback);
      }



    @ReactMethod
    public void EnrollmentOfUser(Callback onSuccess, Callback onFail) {
        this.onSuccess = onSuccess;
        this.onFail = onFail;
        WritableMap params = Arguments.createMap();
        params.putBoolean("successful", true);
        Log.i("FaceTecSDKSampleApp", "Running"+ params);
                 Log.d("FaceTecSDKSampleApp", "Initialization Successfu#&&" + sessionToken);
                 latestProcessor = new EnrollmentProcessor(sessionToken,getCurrentActivity(),sessionTokenErrorCallback,sessionTokenSuccessCallback, user_token);
      }




    @ReactMethod
    public void AuthenticationOfUser(Callback onSuccess, Callback onFail) {
        this.onSuccess = onSuccess;
        this.onFail = onFail;
        WritableMap params = Arguments.createMap();
        params.putBoolean("successful", true);
        Log.i("FaceTecSDKSampleApp", "Running"+ params);
                 Log.d("FaceTecSDKSampleApp", "Initialization Successfu#&&" + sessionToken);
                 latestProcessor = new AuthenticateProcessor(sessionToken,getCurrentActivity(),sessionTokenErrorCallback,sessionTokenSuccessCallback, user_token);
      }
      
    



    interface SessionTokenCallback {
        void onSessionTokenReceived(String sessionToken);
    }

    public void getSessionToken(final SessionTokenCallback sessionTokenCallback) {
        utils.showSessionTokenConnectionText();

        // Do the network call and handle result
        okhttp3.Request request = new okhttp3.Request.Builder()
                .header("X-Device-Key", Config.DeviceKeyIdentifier)
                .header("User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .url(Config.BaseURL + "/session-token")
                .get()
                .build();

        NetworkingHelpers.getApiClient().newCall(request).enqueue(new okhttp3.Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                e.printStackTrace();
                Log.d("FaceTecSDKSampleApp", "Exception raised while attempting HTTPS call.");

                // If this comes from HTTPS cancel call, don't set the sub code to NETWORK_ERROR.
                if(!e.getMessage().equals(NetworkingHelpers.OK_HTTP_RESPONSE_CANCELED)) {
                    // utils.handleErrorGettingServerSessionToken();
                }
            }

            @Override
            public void onResponse(Call call, okhttp3.Response response) throws IOException {
                String responseString = response.body().string();
                response.body().close();
                try {
                    JSONObject responseJSON = new JSONObject(responseString);
                    if(responseJSON.has("sessionToken")) {
                        utils.hideSessionTokenConnectionText();
                        sessionTokenCallback.onSessionTokenReceived(responseJSON.getString("sessionToken"));
                        Log.d("FaceTecSDKSampleApp", "ExcHHHHe="+responseJSON.getString("sessionToken"));
                    }
                    else {
                        ///utils.handleErrorGettingServerSessionToken();
                        Log.d("FaceTecSDKSampleApp", "ExcHHHe="+responseJSON.getString("sessionToken"));
                    }
                }
                catch(JSONException e) {
                    e.printStackTrace();
                    Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");
                    //utils.handleErrorGettingServerSessionToken();
                }
            }
        });
    }

    Processor.SessionTokenErrorCallback sessionTokenErrorCallback = new Processor.SessionTokenErrorCallback() {
        @Override
        public void onError(String msg) {
         try{
           onFail.invoke(msg);
         }catch (Exception e){
           e.printStackTrace();
         }
        }
      };
    
      Processor.SessionTokenSuccessCallback sessionTokenSuccessCallback = new Processor.SessionTokenSuccessCallback() {
        @Override
        public void onSuccess(String msg) {
          onSuccess.invoke(msg);
        }
      };
}

