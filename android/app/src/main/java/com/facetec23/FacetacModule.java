package com.facetec23;

import android.app.Activity;
import android.util.Log;
import android.view.View;

import androidx.annotation.NonNull;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableMapKeySetIterator;
import com.facebook.react.bridge.ReadableType;
import com.facetec.sdk.FaceTecSDK;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

import Processors.Config;
import Processors.LivenessCheckProcessor;
import Processors.NetworkingHelpers;
import Processors.Processor;
import okhttp3.Call;

public class FacetacModule extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    public Processor latestProcessor;
    String sessionToken;
    public SampleAppUtilities utils = new SampleAppUtilities();
    private boolean isSessionPreparingToLaunch = false;

    public FacetacModule(ReactApplicationContext reactContext) {
        super(reactContext);
        this.reactContext = reactContext;
    }

    @NonNull
    @Override
    public String getName() {
        return "VlinderFaceTech";
    }

    @ReactMethod
    public void LivenessCheck() {
        final Activity activity = getCurrentActivity();
        Log.i("FaceTecSDKSampleApp", "working");
        // callback.invoke("SatisMeter installation successful... userId: " + userId + "
        // writeKey: " + writeKey);

        Config.initializeFaceTecSDKFromAutogeneratedConfig(activity, new FaceTecSDK.InitializeCallback() {
            @Override
            public void onCompletion(final boolean successful) {
                if(successful) {
                    Log.d("FaceTecSDKSampleApp", "Initialization Successful###");
                }
                onLivenessCheckPressed();
            }
        });
    }

    // Perform Liveness Check.
    public void onLivenessCheckPressed() {
        Log.d("FaceTecSDKSampleApp", "Initialization Successfu#&&ii");
        final Activity activity = getCurrentActivity();
       // getSessionToken(new SessionTokenCallback() {
           // @Override
          //  public void onSessionTokenReceived(String sessionToken) {
                Log.d("FaceTecSDKSampleApp", "Initialization Successfu#&&");
                isSessionPreparingToLaunch = false;
                latestProcessor = new LivenessCheckProcessor( sessionToken, getCurrentActivity());
         //   }
       // });
    }

    interface SessionTokenCallback {
        void onSessionTokenReceived(String sessionToken);
    }

    public void getSessionToken(final SessionTokenCallback sessionTokenCallback) {
        utils.showSessionTokenConnectionText();

        // Do the network call and handle result
        okhttp3.Request request = new okhttp3.Request.Builder()
                .header("X-Device-Key", Config.DeviceKeyIdentifier)
                .header("User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .url(Config.BaseURL + "/session-token")
                .get()
                .build();

        NetworkingHelpers.getApiClient().newCall(request).enqueue(new okhttp3.Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                e.printStackTrace();
                Log.d("FaceTecSDKSampleApp", "Exception raised while attempting HTTPS call.");

                // If this comes from HTTPS cancel call, don't set the sub code to NETWORK_ERROR.
                if(!e.getMessage().equals(NetworkingHelpers.OK_HTTP_RESPONSE_CANCELED)) {
                    // utils.handleErrorGettingServerSessionToken();
                }
            }

            @Override
            public void onResponse(Call call, okhttp3.Response response) throws IOException {
                String responseString = response.body().string();
                response.body().close();
                try {
                    JSONObject responseJSON = new JSONObject(responseString);
                    if(responseJSON.has("sessionToken")) {
                        utils.hideSessionTokenConnectionText();
                        sessionTokenCallback.onSessionTokenReceived(responseJSON.getString("sessionToken"));
                        Log.d("FaceTecSDKSampleApp", "ExcHHHHe="+responseJSON.getString("sessionToken"));
                    }
                    else {
                        ///utils.handleErrorGettingServerSessionToken();
                        Log.d("FaceTecSDKSampleApp", "ExcHHHe="+responseJSON.getString("sessionToken"));
                    }
                }
                catch(JSONException e) {
                    e.printStackTrace();
                    Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");
                    //utils.handleErrorGettingServerSessionToken();
                }
            }
        });
    }
}
